package mlkem768

import (
	"bytes"
	"encoding/hex"
	"math/big"
	"testing"

	"golang.org/x/crypto/sha3"
)

func TestFieldAdd(t *testing.T) {
	for a := fieldElement(0); a < q; a++ {
		for b := fieldElement(0); b < q; b++ {
			got := fieldAdd(a, b)
			exp := (a + b) % q
			if got != exp {
				t.Fatalf("%d + %d = %d, expected %d", a, b, got, exp)
			}
		}
	}
}

func TestFieldSub(t *testing.T) {
	for a := fieldElement(0); a < q; a++ {
		for b := fieldElement(0); b < q; b++ {
			got := fieldSub(a, b)
			exp := (a - b + q) % q
			if got != exp {
				t.Fatalf("%d - %d = %d, expected %d", a, b, got, exp)
			}
		}
	}
}

func TestFieldMul(t *testing.T) {
	for a := fieldElement(0); a < q; a++ {
		for b := fieldElement(0); b < q; b++ {
			got := fieldMul(a, b)
			exp := fieldElement((uint32(a) * uint32(b)) % q)
			if got != exp {
				t.Fatalf("%d * %d = %d, expected %d", a, b, got, exp)
			}
		}
	}
}

func BitRev7(n uint8) uint8 {
	if n>>7 != 0 {
		panic("not 7 bits")
	}
	var r uint8
	r |= n >> 6 & 0b0000_0001
	r |= n >> 4 & 0b0000_0010
	r |= n >> 2 & 0b0000_0100
	r |= n /**/ & 0b0000_1000
	r |= n << 2 & 0b0001_0000
	r |= n << 4 & 0b0010_0000
	r |= n << 6 & 0b0100_0000
	return r
}

func TestZetas(t *testing.T) {
	ζ := big.NewInt(17)
	q := big.NewInt(q)
	for k, zeta := range zetas {
		exp := new(big.Int).Exp(ζ, big.NewInt(int64(BitRev7(uint8(k)))), q)
		if big.NewInt(int64(zeta)).Cmp(exp) != 0 {
			t.Errorf("zetas[%d] = %v, expected %v", k, zeta, exp)
		}
	}
}

func TestPKEKeyGenVector(t *testing.T) {
	// https://raw.githubusercontent.com/post-quantum-cryptography/KAT/v0.0.1/MLKEM/kat_MLKEM_768.rsp, count = 0
	d, _ := hex.DecodeString("6dbbc4375136df3b07f7c70e639e223e177e7fd53b161b3f4d57791794f12624")
	ekExp, _ := hex.DecodeString("cee764e972ce03f3104c1546d56449de333a8d94138cd60f74697f91956fa53050658b81a4348299f66e0cdc105094473524a753f477d2c2cb00c514d6c015d6a88f00d200ede4ce4de785be9c6afc9b6cc980667d6c12ae91cad0283aad0c6f42774136a05ab4f7369ce031cb680c8e61abd4067d674c6f93a636765941266a5270c8b59ee4952b2561a54266b3989c04fb9065b0b4d18a9151c88bf53ab8910a244da8902f631dc9602f7a6c8642c86b25cc27380c3253402bf9a49874fb53b069534a4364f61240a3438b9d913ecce008e7d2053e521bc523a5fd041148f0b72117b2b09c550d172f832c256f58776598381eb276b23665fe46cdb5642771d72980492dd6b1294cf8c3647b7a428a92caa028b74a6b516621050535a5930194870fdc2c3ed7d4161d76265e742905b33240c90ffd585abca91b16547aaa61c30efbb2e3558a9173ac1f5ca79cc8773678bc2bf8271827be381b7e41a24bddb014a1e37dedeb05964b9e5fba88ba77581e103966006bfd32b29e63779f39a40e9223f2c612fe8a1294bb3304c0152c0402cd2808e1eab86c4703a644affa0354c2b20f9fc0a717b084bd0c5bf3e38340aac3f2f46c7d862c97841c5490391545877d32a16a648e474aa783956f2bdbab1d864d73cc4cce782753b8420538aad23b69ed29640538b34e085caf478be2f16744834476076d696c963f86784e474890f549d90bbfafc634b1279f19ca3313285183a33bef68cb0e6a73efb84246cc9e55825abea44b49260545912eaad3b6265b8de5709bc46958259799cfb3ca4e797887b90693084ea4c849fe3b74219c9332f502cefb092a957a6010634df5c90f223b97181d2abc3d9f18b898e2395012366581af77aa1bec1352dc4ab3f8f7599c7ca456c18f3dc28da7780be0848dc44a21f1b99ad44a110a3661b824484d1523f8c8836770adab81376c04cb30839c857ba05cf38097093b5ef9c9b5d128d299673f54aaf7972baf14ad2f353beb0cc2730175c54b22bd3664b8412848283bab53c209358a796a201d779fc1339157e97cbf3abb5a716adc102c872c68ce8000505989da3387fc585057b8745547906f25b21e7b04ce387d7253a89987c5b9763234fcb6426abd680697c14220f2eb91fc0bd03cc713dd1b360e367b4ec9a420b687af25540c76423765c73d003d5290685d617abb681332fc2d6e4ca3d7945d0ab21464fb5f411b80488b34dae42460c0bdb87cb37fc73516cc6b720a6fca02095641839d970b8e464290136c104028f94a6d26e4380f24af489488b51b2b1028c3f357a2b06b56d895a0a468896ea89b29c05cfe559297833128998ed4f229be5422419b5466d4156a251f7680aa284635eaa5323295b61873cc650b424730099eeb98c0108ed7e42e3cd4206726229acc938de7668ad09a795972bd71af48b59a4a74916bf140b657386e3c314d9a8a4ba37572e091ca9a32af3942a0663752e347e48316a8c9b64a52ba01303b89a028648475a3875de273981c95a67d2186defa6c58865af5751c8284803aca77535692bdc29c7f07ce31a33db4649b38b7cbb2db01c42c5f24a61e4f7b700d69a392282d5287879a2c1362b22509488e697b6f4a41d755f36acd4f57f9b543de0da8a597eefe1c37aecaffce62")
	dkExp, _ := hex.DecodeString("208528952133b50395843354cc36c31b13a995c3c9b6035c10a408faa9474a1b3948501163406b6b7c0036773346d300b5683748f68bc7f40085854615336ff152470c27b5d2ab8ab517a69e434667bcc19c9927ff6bc1a2b01dffe3c5f709363160962c21bdc4840f70aa38c6578f4fb51a6a8543dea886f5a70d8bfb859764c927d1aa65d350d7726a8df8ae68dbcf57b86d3c0956bafa9045954e793a60b7007ea36c9c01f7c7f961c8572a295b330e17ccaafa81c0cde46b7aa8545a6740c532af86b34fe018c6a4c06a2a4a7ad66c848a502fbca69ed9f3a2490bcb0fe1497608454e02c580d7aaf860c07be21cda9b77183107a0d3220c7440c759cdab4538c2a6698a7941e3e27d06764007d89d05587b1656326145280bb6553ca6bbb9a20fd5ba98457643a10376b2fa425082af797c3d013b9c4d842d252420b4e54e32fb63fff3aa5840b11b2235de88694eeaca44d7915dd4be704801bbd20101a511e4302c5da7198392c876a7aee14c5ef0e13616a718ba0578a8724e3ab8c7914718152a9290a78705785a6a4707fbd2858123c5ca6aaa359aa0b2c62fac948c22b2344879758ff34b0bb9575c0b795a42483104a61ee7470d37120d802aa8f41aebeab21b269f6b4c35dc167ab919b827a1a6607c4fa5362cee4266974bad8fd9c85ee533060003147661cda2a75c1a6f03f4aa3348bb00627b9905774e3407483a33f8b9bfe75aa4338a3086593f90a0524a5853b2d181c741b094a01cd0217860ac69b1a97d9496af62d0729759c79181a6a35cbfcbea1f66c04418eabf5ff4515055cb6c04c8f38599d1ec2ccbb4757619383be09b8168935f2749712690f8f08e83e516beb81eb80497650076d7fc3564eccdbae0955bf26492e21c0571213448aa74ac60413c8ccac3257ac044028876f9269d9d38896188bb6a8bcdc0c617127068ac730c5e0791fe65157fe34f1a6a32a825845d087cae7a8d56d33da833867c5ca0fd4baa8b239bca2b0b5634c5e746a74720b69ec181c0819b3e82c22266768f37a14ff322583552f0789a39f4970c558b0f34cbbbaca2dd9092bec8382aba7c4fb9ada1249a88ec28d445733ee54ed63c227306200f2396e2749149980155e6cfbb1788e390770fa4ca42dcae402c16a708663f812312d245a88b8a0827110e37a66cd22185781b617267e25895de1112a1179bf1e2207f3765fac879d7726d1e231d98d9c825d198f6211d2728bc1617b44292a542e147ed1ca8e28a2ffb531665c788a7c039477c579e06b0f96705898151e0f465da622b3aa753f3d68763a95ac1d15856d10950fbaa8de132b4a6ad0a085486e506cc463178065a383a9500d74745cccab13391768473c18600f2f0c779e218902cb288e62630f52a54dab9cdc186dfb02f48b81dcfb9bc4e4a829d26ab90158e30868d15dc3b9fa341ccaa3f68f451594a2b31ba0411728c4ff85d317cc2c158b45ccab156f3312c065ad0258bada3cd3152794330a5510b6920125ddeb0421ea72d21a8b91dbc478c8350edb2b9c68300a0051408ca615ada27119657dff3bffcf0575723c080599c73f661ac21c24b04c3172c7e5396b1a56183c204b32b81a98390cb")
	ek, dk := pkeKeyGen(d)
	if !bytes.Equal(ek, ekExp) {
		t.Errorf("ek: got %x, expected %x", ek, ekExp)
	}
	if !bytes.Equal(dk, dkExp) {
		t.Errorf("dk: got %x, expected %x", dk, dkExp)
	}
	msg, _ := hex.DecodeString("20a7b7e10f70496cc38220b944def699bf14d14e55cf4c90a12c1b33fc80ffff")
	ctExp, _ := hex.DecodeString("95e12d9810a2bdc59e8f816d256a227ec0cce465afc23175c29c564f8f1f5b8b28f95574364c80bfb0c7b8d47be78c06878f6f738d286dc51d2b76cf56c534b2c95a2a87ae1506107e103f50eea9f5c642e4edb1985adaee3b353da7388cbc4d6a9edb6a3364f40ef29961ec4137950d17a0a29160c9471a5e16a1110346f308f65a7674d20b628c431c8c38aa47306c4876c6782e9743e79252a64152076092832cd825e0ac0e3f73ca795690cb8360a9f1c7922121d2567559550b126197713a34cfc7eb6e75644dfa0ce725f023d219a77ebfa25aac1de69d35c72d48a3f94969c96ddf3bd8e92802cb58f8416f490346c941db8fb4436c6f41e245234e8ebdbe7d71a54386527681fc4ec04d973e680215da1faa4d5a1fa0932647d1a029c829a30ef7f541172131b3cb6bb262ecda93632c5514fcce50265f669114e9a5c5b3e4b678efa789b1a715857b283b0f02d90c8a595afe1c731834cf829699e8b7584a885636ca4895e0eb067e629f3c47a0b8cc6c97712470422cbe0338e45b772e100c626d758c92415358837c62e0a832bff0cb75560e9d256267b9503ad93dd4726cb801eb6886361b2226da68218efc8792883afa8d02789d9437470b28c9edbe1c1391ac43d278b10cb58a7be2cf64813c176be30b613985ffe008e80e4f9b0358d4b51222ce5bf84703f9bec350f80af5179ee9401ee52c307a03712490bfcae61ba5a8d864fe5bd22f68e0a76b4aed8017089f27bdabdcc12811753c3b906b8cd7335b6b6e9f535ba5cecaa7bedb3b9bfa2637b7ef765bef28a413cdc54096aef2db64b8b23a8a8333d43b598ef1ef9dee4911b9914ed8dc0f6a786f090178f7902e5ab1e8ff5334fe4bcf4a809c45aaeeb3d30f2a2a0f5efaacb3492a94e74c30c7127f91fc4c1a75fcb173c5ae7af08e5d789fe235ea65e26f770f10c22f9f278683ac5b3ef1487009409b42d59a6036f3eb2316124011836ad9e9ed626efa3197c929cf65f31b9128067d4a37b56b2fae2fe7496e1a5ffdaa8d5ddcfc2a9660a8cd0b40ddd66d1a9fd8bec959b9e2f3061fdc94090f544c0431c1c18e806a45e29cd1c8fee5dd12eb4c1b6d289789bb964e4947e4e28c6a7fc6b8e24cfb2da599a8119be6baff918ac38a2cf38fc1252f23837617a714a43c4a433ba3f1a18e5c6990f0a55196153a61a319b665aa7717ee53a3cd8b1aab2f1dd94b71600c41e85c180ee7647ee8a842f140f24da2557707a1b1aa426ebdf06f5e78d72c65d0f95df9fc76e70ab23164a2e7c07523d769793a037168a1c9980c4785b1affc369637606f5a528ca5974e9b8a9a1632101ab5f35e54e12151adf85830893e7c1ded1df45ee9e5094b65f5392effa4ab3ed46f7553005cab9ebb60a4f11591a771e09048c1fc7f2a2a578411f36b73f7fd00f7ac5d690591638318d868d9c100ea58f1da33e077b22a46f2a505483e655a8282905d96aaa3a6042c1f527c87878e6d867c339fb2c9a5ec7916f727b6001a9a0964ceb8f71a500cc3e5")
	ekH := sha3.Sum256(ek)
	G := sha3.Sum512(append(msg, ekH[:]...))
	r := G[32:]
	ct, err := pkeEncrypt(ek, msg, r)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(ct, ctExp) {
		t.Errorf("ct: got %x, expected %x", ct, ctExp)
	}
	mm, err := pkeDecrypt(dk, ct)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(mm, msg) {
		t.Errorf("msg: got %x, expected %x", mm, msg)
	}
}

var sink fieldElement

func BenchmarkSampleNTT(b *testing.B) {
	for i := 0; i < b.N; i++ {
		sink ^= sampleNTT(bytes.Repeat([]byte("A"), 32), '4', '2')[0]
	}
}
